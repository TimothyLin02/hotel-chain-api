--set search_path="hoteldb";

-- total 12 tables

create table hotel_brand (
	brand_id integer generated by default as identity (start 1000), 
	hotel_name varchar(100) not null, 
	number_of_hotels integer  not null default 0, 
	constraint "hotel_brand_PK" primary key (brand_id)
);	
	
create table office (
	office_id integer generated by default as identity (start 1000), 
	address varchar(255)  not null, 
	email varchar(60)  not null, 
	is_main boolean  not null default false, 
	phone_number varchar(15)  not null, 
	brand_id integer  not null, 
	constraint "office_PK" primary key (office_id),
	constraint "office_FK_brand_id" foreign key (brand_id)
		references hotel_brand(brand_id)
		on update cascade on delete cascade
);
		
create table hotel (
	hotel_id integer generated by default as identity (start 1000), 
	address varchar(255) not null, 
	email varchar(60) not null, 
	phone_number varchar(15) not null, 
	stars numeric(1) not null, 
	total_number_of_rooms integer  not null default 0, 
	brand_id integer  not null, 
	constraint "hotel_PK" primary key (hotel_id),
	constraint "hotel_FK_brand_id" foreign key (brand_id)
		references hotel_brand(brand_id)
		on update cascade on delete cascade,
	constraint "hotel_stars_check" check (stars>0 and stars <8)
);

create table room (
	room_number varchar(5) not null, 
	capacity numeric(1) not null, 
	extendable boolean not null default false, 
	price numeric(8,2) not null default 0, 
	view varchar(255) not null, 
	hotel_id integer not null, 
	constraint "room_PK" primary key (hotel_id, room_number),
	constraint "room_FK_hotel_id" foreign key (hotel_id) 
		references hotel(hotel_id)
		on update cascade on delete cascade,
	constraint "room_view_check" check (view = 'mountain view' or view = 'sea view'),
	constraint "capacity_check" check (capacity > 0 and capacity <= 8),
	constraint "room_number_check" check (length(room_number) > 0)
);

create table amenity (
	amenity_id integer generated by default as identity (start 1000), 
	amenity varchar(255) not null, 
	constraint "amenity_PK" primary key (amenity_id)
);


create table room_amenity (
	room_number varchar(5) not null,
	hotel_id integer not null,
	amenity_id integer not null, 
	constraint "room_amenity_PK" primary key (room_number,amenity_id),
	constraint "room_amenity_FK_room_number_hotel_id" foreign key (room_number,hotel_id)
		references room(room_number,hotel_id)
		on update cascade on delete cascade
);

create table hotel_amenity(
	hotel_id integer not null, 
	amenity_id integer not null, 
	constraint "hotel_amenity_PK" primary key (hotel_id,amenity_id),
	constraint "hotel_amenity_FK_hotel_id" foreign key (hotel_id)
		references hotel(hotel_id)
		on update cascade on delete cascade
);


create table employee (
	employee_id integer generated by default as identity (start 1000), 
	first_name varchar(50)not null, 
	middle_name varchar(50), 
	last_name varchar(50) not null, 
	home_address varchar(255) not null, 
	user_name varchar(50) not null, 
	password varchar(50) not null, 
	role varchar(100) not null, 
	salary numeric(9,2) not null, 
	sin varchar(15) not null, 
	hotel_id integer not null, 
	manager_id integer, 
	constraint "employee_PK" primary key (employee_id),
	constraint "employee_FK_hotel_id" foreign key (hotel_id)
		references hotel(hotel_id)
		on update cascade on delete cascade,
	constraint "employee_FK_manager_id" foreign key (hotel_id)
		references hotel(hotel_id)
		on update cascade on delete cascade
);

create table customer (
	custid integer generated by default as identity (start 1000), 
	brand_id integer not null, 
	first_name varchar(50)not null, 
	last_name varchar(50)not null, 
	address varchar(255)not null, 
	phone_number varchar(15)not null, 
	user_name varchar(50) not null,
	password varchar(50)not null, 
	registration_date timestamp not null, 
	sin varchar(15) not null, 
	constraint "customer_PK" primary key (custid),
	constraint "hotel_brand_FK_brand_id" foreign key (brand_id)
		references hotel_brand(brand_id)
		on update cascade on delete no action
);

 
create table booking (
	booking_id integer generated by default as identity (start 1000), 
	state varchar(15) not null, 
	cost numeric(10,2) not null, 
	end_date timestamp not null, 
	start_date timestamp not null, 
	time_stamp timestamp not null, 
	employee_id integer, 
	custid integer not null,
	constraint "booking_PK" primary key (booking_id, state),
	constraint "booking_FK_employee_id" foreign key (employee_id)
		references employee (employee_id)
		on update cascade on delete no action,
	constraint "booking_FK_custid" foreign key (custid)
		references customer (custid)
		on update cascade on delete cascade, 
	constraint "check_date" check (end_date > start_date),
	constraint "check_state" check (state = 'Booking' or state = 'Renting' or state = 'Paid' or state = 'Cancelled')
);
 
create table booked_room (
	booking_id integer not null, 
	state varchar(15) not null,
	hotel_id integer not null, 	 
	room_number varchar(5) not null, 
	capacity numeric(1) not null, 
	extendable boolean not null, 
	occupancy numeric(1) not null, 
	price numeric(8,2) not null,
	view varchar(255), 
	constraint "booked_room_PK" primary key (booking_id, state, hotel_id, room_number),
	constraint "booked_room_FK_booking_id_state" foreign key (booking_id,state)
		references booking(booking_id,state)
		on update cascade on delete cascade,
	constraint "booked_room_fK_hotel_id_room_number" foreign key (hotel_id,room_number)
		references room(hotel_id,room_number)
		on update no action on delete no action
	
);


create table booked_amenity (
	booking_id integer not null, 	
	state varchar(15) not null, 
	hotel_id integer not null, 
	room_number varchar(5) not null, 
	amenity_id integer not null, 	
	amenity varchar(255), 
	constraint "booked_amenity_PK" primary key ( booking_id, hotel_id, state, room_number, amenity_id),
	constraint "booked_amenity_FK_booking_id_state_hotel_id_room_number" foreign key (booking_id,state, hotel_id,room_number) 
		references booked_room(booking_id,state, hotel_id,room_number)
		on update cascade on delete cascade,
	constraint "hotel_amenity_FK_hotel_id_amenity_id" foreign key (hotel_id,amenity_id) 
		references hotel_amenity(hotel_id, amenity_id)
		on update no action on delete no action
);
